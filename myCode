class Solution {
    public List<List<String>> solveNQueens(int n) {
        int[] cols = new int[n];
        for(int i=0;i<n;i++) {
            cols[i]=i;
        }
        List<List<String>> result = new ArrayList<List<String>>();
        helper(n, 0, 0, cols, new ArrayList<String>(), result);
        return result;
    }
    
    public void helper(int n, int i, int j, int[] cols, List<String> soFar, List<List<String>> result) {
        if(i>0) {
            int lasti = i-1;
            int lastCol = getCol(soFar.get(lasti));
            for(int previ=0 ; previ<i-1 ; previ++) {
                if(getCol(soFar.get(previ)) == lastCol || (Math.abs(lasti-previ) == Math.abs(getCol(soFar.get(previ))-lastCol))) {
                    return;
                }
            }
        }
        if(i==n) {
            result.add(new ArrayList<String>(soFar));
            return;
        }
        for(int col=j ; col<n ; col++) {
            soFar.add(makeString(cols[col], n));
            swap(cols, col, j);
            helper(n, i+1, j+1, cols, soFar, result);
            swap(cols, col, j);
            soFar.remove(soFar.size()-1);
        }
    }
    
    public void swap(int[] arr, int a, int b) {
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }
    
    public String makeString(int col, int n) {
        StringBuilder s = new StringBuilder();
        for(int k=0 ; k<n ; k++) {
            if(k==col) {
                s.append("Q");
            } else {
                s.append(".");
            }
        }
        return s.toString();
    }
    
    public int getCol(String s) {
        int k=0;
        for(char c : s.toCharArray()) {
            if(c == 'Q') {
                return k;
            }
            k++;
        }
        return k;
    }
}
